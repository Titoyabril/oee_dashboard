# Generated by Django 5.0.7 on 2025-10-03 21:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('oee_analytics', '0003_mlfeaturestore_mlinference_mlmodelregistry'),
    ]

    operations = [
        migrations.CreateModel(
            name='SQLServerArea',
            fields=[
                ('area_id', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('area_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'Areas',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SQLServerMachine',
            fields=[
                ('machine_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('machine_name', models.CharField(max_length=100)),
                ('machine_type', models.CharField(blank=True, max_length=50, null=True)),
                ('asset_number', models.CharField(blank=True, max_length=50, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('theoretical_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('max_temperature', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('max_pressure', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'Machines',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SQLServerPlant',
            fields=[
                ('plant_id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('plant_name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'Plants',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_id', models.CharField(help_text='Unique area identifier within site', max_length=50)),
                ('name', models.CharField(help_text='Area display name', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('area_type', models.CharField(choices=[('PRODUCTION', 'Production'), ('ASSEMBLY', 'Assembly'), ('PACKAGING', 'Packaging'), ('QUALITY', 'Quality Control'), ('MAINTENANCE', 'Maintenance'), ('WAREHOUSE', 'Warehouse'), ('UTILITIES', 'Utilities'), ('OTHER', 'Other')], default='PRODUCTION', max_length=20)),
                ('floor_area_sqm', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('floor_level', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional area metadata')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'asset_area',
                'ordering': ['site', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_id', models.CharField(help_text='Unique cell identifier within line', max_length=50)),
                ('name', models.CharField(help_text='Cell display name', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('cell_type', models.CharField(choices=[('PROCESSING', 'Processing'), ('ASSEMBLY', 'Assembly'), ('TESTING', 'Testing'), ('INSPECTION', 'Inspection'), ('PACKAGING', 'Packaging'), ('MATERIAL_HANDLING', 'Material Handling'), ('BUFFER', 'Buffer'), ('OTHER', 'Other')], default='PROCESSING', max_length=20)),
                ('sequence_order', models.IntegerField(help_text='Order in the production line')),
                ('cycle_time_seconds', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('setup_time_minutes', models.IntegerField(blank=True, null=True)),
                ('target_yield_percent', models.DecimalField(decimal_places=2, default=Decimal('100.0'), max_digits=5)),
                ('scrap_rate_percent', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5)),
                ('active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('IDLE', 'Idle'), ('BLOCKED', 'Blocked'), ('STARVED', 'Starved'), ('DOWN', 'Down'), ('MAINTENANCE', 'Maintenance')], default='IDLE', max_length=20)),
                ('metadata', models.JSONField(default=dict, help_text='Additional cell metadata')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'asset_cell',
                'ordering': ['line', 'sequence_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='OperatorShift',
            fields=[
                ('shift_assignment_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('operator_id', models.CharField(max_length=50)),
                ('shift_date', models.DateField()),
                ('shift_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('start_time_utc', models.DateTimeField()),
                ('end_time_utc', models.DateTimeField(blank=True, null=True)),
                ('role', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'OperatorShifts',
            },
        ),
        migrations.CreateModel(
            name='SparkplugNode',
            fields=[
                ('node_id', models.CharField(help_text='Sparkplug Node ID', max_length=100, primary_key=True, serialize=False)),
                ('group_id', models.CharField(help_text='Sparkplug Group ID', max_length=100)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('status', models.CharField(choices=[('OFFLINE', 'Offline'), ('ONLINE', 'Online'), ('BIRTH', 'Birth Received'), ('DEATH', 'Death Received'), ('STALE', 'Stale Data')], default='OFFLINE', max_length=20)),
                ('last_birth_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_death_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_data_timestamp', models.DateTimeField(blank=True, null=True)),
                ('birth_sequence_number', models.BigIntegerField(default=0)),
                ('last_sequence_number', models.BigIntegerField(default=0)),
                ('mqtt_broker_host', models.CharField(max_length=255)),
                ('mqtt_broker_port', models.IntegerField(default=1883)),
                ('mqtt_username', models.CharField(blank=True, max_length=100, null=True)),
                ('mqtt_password', models.CharField(blank=True, max_length=255, null=True)),
                ('mqtt_use_tls', models.BooleanField(default=False)),
                ('message_count', models.BigIntegerField(default=0)),
                ('error_count', models.BigIntegerField(default=0)),
                ('last_error_message', models.TextField(blank=True, null=True)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=Decimal('100.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'sp_nodes',
            },
        ),
        migrations.CreateModel(
            name='SQLDowntimeEvent',
            fields=[
                ('downtime_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_timestamp_utc', models.DateTimeField()),
                ('end_timestamp_utc', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('sub_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('operator_id', models.CharField(blank=True, max_length=50, null=True)),
                ('technician_id', models.CharField(blank=True, max_length=50, null=True)),
                ('shift_id', models.CharField(blank=True, max_length=20, null=True)),
                ('is_planned', models.BooleanField(default=False)),
                ('severity_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('repair_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('parts_used', models.CharField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'DowntimeEvents',
            },
        ),
        migrations.CreateModel(
            name='SQLMachineEvent',
            fields=[
                ('event_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp_utc', models.DateTimeField(db_index=True)),
                ('event_type', models.CharField(max_length=50)),
                ('event_value', models.DecimalField(blank=True, decimal_places=6, max_digits=18, null=True)),
                ('event_text', models.CharField(blank=True, max_length=500, null=True)),
                ('payload_json', models.TextField(blank=True, null=True)),
                ('source_system', models.CharField(default='PLC', max_length=50)),
                ('quality_score', models.SmallIntegerField(default=100, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'MachineEvents',
            },
        ),
        migrations.CreateModel(
            name='SQLQualityEvent',
            fields=[
                ('quality_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp_utc', models.DateTimeField()),
                ('parts_inspected', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('parts_passed', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('parts_failed', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('parts_reworked', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('inspector_id', models.CharField(blank=True, max_length=50, null=True)),
                ('inspection_method', models.CharField(blank=True, max_length=50, null=True)),
                ('shift_id', models.CharField(blank=True, max_length=20, null=True)),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'QualityEvents',
            },
        ),
        migrations.CreateModel(
            name='SQLServerProductionLine',
            fields=[
                ('line_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('line_name', models.CharField(max_length=100)),
                ('line_type', models.CharField(blank=True, max_length=50, null=True)),
                ('theoretical_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('target_availability_percent', models.DecimalField(decimal_places=2, default=Decimal('85.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('target_performance_percent', models.DecimalField(decimal_places=2, default=Decimal('95.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('target_quality_percent', models.DecimalField(decimal_places=2, default=Decimal('99.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'ProductionLines',
            },
        ),
        migrations.CreateModel(
            name='CanonicalTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(help_text='Canonical tag name', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Tag description')),
                ('tag_type', models.CharField(choices=[('state.run', 'Running State'), ('state.idle', 'Idle State'), ('state.down', 'Down State'), ('state.blocked', 'Blocked State'), ('counter.good', 'Good Parts Counter'), ('counter.total', 'Total Parts Counter'), ('counter.reject', 'Reject Parts Counter'), ('rate.instant', 'Instantaneous Rate'), ('rate.average', 'Average Rate'), ('cycle.time_actual', 'Actual Cycle Time'), ('cycle.time_ideal', 'Ideal Cycle Time'), ('fault.code', 'Fault Code'), ('fault.active', 'Active Fault'), ('fault.severity', 'Fault Severity'), ('utilization.planned_time', 'Planned Time'), ('utilization.runtime', 'Runtime'), ('temperature', 'Temperature'), ('pressure', 'Pressure'), ('vibration', 'Vibration'), ('speed', 'Speed'), ('power', 'Power'), ('energy', 'Energy')], max_length=30)),
                ('data_type', models.CharField(choices=[('BOOL', 'Boolean'), ('INT', 'Integer'), ('REAL', 'Real/Float'), ('STRING', 'String'), ('TIMESTAMP', 'Timestamp')], default='REAL', max_length=20)),
                ('unit', models.CharField(blank=True, help_text='Engineering unit', max_length=20, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('quality_threshold', models.IntegerField(default=192, help_text='Minimum quality threshold (0-255)')),
                ('deadband_absolute', models.DecimalField(decimal_places=4, default=Decimal('0.0'), max_digits=10)),
                ('deadband_percent', models.DecimalField(decimal_places=2, default=Decimal('0.0'), max_digits=5)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'canonical_tag',
                'ordering': ['tag_type', 'tag_name'],
                'indexes': [models.Index(fields=['tag_type'], name='canonical_t_tag_typ_02bd33_idx'), models.Index(fields=['data_type'], name='canonical_t_data_ty_c526ad_idx')],
            },
        ),
        migrations.CreateModel(
            name='ConfigurationAudit',
            fields=[
                ('audit_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('table_name', models.CharField(max_length=128)),
                ('record_id', models.CharField(max_length=100)),
                ('operation_type', models.CharField(choices=[('INSERT', 'Insert'), ('UPDATE', 'Update'), ('DELETE', 'Delete')], max_length=20)),
                ('old_values', models.TextField(blank=True, null=True)),
                ('new_values', models.TextField(blank=True, null=True)),
                ('changed_by', models.CharField(max_length=100)),
                ('changed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('client_ip', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'ConfigurationAudit',
                'indexes': [models.Index(fields=['table_name', 'changed_at'], name='Configurati_table_n_934bad_idx'), models.Index(fields=['changed_by', 'changed_at'], name='Configurati_changed_e60143_idx')],
            },
        ),
        migrations.CreateModel(
            name='DataRetentionPolicy',
            fields=[
                ('policy_id', models.AutoField(primary_key=True, serialize=False)),
                ('table_name', models.CharField(max_length=128)),
                ('retention_days', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('archive_after_days', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('compression_enabled', models.BooleanField(default=True)),
                ('policy_description', models.CharField(blank=True, max_length=500, null=True)),
                ('last_cleanup_utc', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'DataRetentionPolicies',
                'indexes': [models.Index(fields=['table_name'], name='DataRetenti_table_n_d070a2_idx')],
            },
        ),
        migrations.CreateModel(
            name='DowntimeReason',
            fields=[
                ('reason_code', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('reason_category', models.CharField(max_length=50)),
                ('reason_subcategory', models.CharField(blank=True, max_length=50, null=True)),
                ('reason_description', models.CharField(max_length=200)),
                ('mttr_target_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('is_planned', models.BooleanField(default=False)),
                ('severity_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'DowntimeReasons',
                'indexes': [models.Index(fields=['reason_category'], name='DowntimeRea_reason__0e4af8_idx'), models.Index(fields=['is_planned'], name='DowntimeRea_is_plan_6a5ea6_idx'), models.Index(fields=['is_active'], name='DowntimeRea_is_acti_26350c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_id', models.CharField(help_text='Unique machine identifier within cell', max_length=50)),
                ('name', models.CharField(help_text='Machine display name', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_number', models.CharField(blank=True, max_length=100, null=True)),
                ('asset_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('machine_type', models.CharField(choices=[('CNC', 'CNC Machine'), ('ROBOT', 'Robot'), ('CONVEYOR', 'Conveyor'), ('PRESS', 'Press'), ('FURNACE', 'Furnace'), ('PUMP', 'Pump'), ('MOTOR', 'Motor'), ('SENSOR', 'Sensor'), ('PLC', 'PLC'), ('HMI', 'HMI'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('rated_power_kw', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('voltage', models.IntegerField(blank=True, null=True)),
                ('max_speed_rpm', models.IntegerField(blank=True, null=True)),
                ('design_oee_percent', models.DecimalField(decimal_places=2, default=Decimal('85.0'), max_digits=5)),
                ('target_availability_percent', models.DecimalField(decimal_places=2, default=Decimal('90.0'), max_digits=5)),
                ('target_performance_percent', models.DecimalField(decimal_places=2, default=Decimal('95.0'), max_digits=5)),
                ('target_quality_percent', models.DecimalField(decimal_places=2, default=Decimal('99.0'), max_digits=5)),
                ('install_date', models.DateField(blank=True, null=True)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('maintenance_interval_days', models.IntegerField(default=90)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('protocol', models.CharField(blank=True, choices=[('OPCUA', 'OPC-UA'), ('MODBUS', 'Modbus'), ('ETHERNET_IP', 'EtherNet/IP'), ('PROFINET', 'Profinet'), ('S7', 'Siemens S7'), ('HTTP', 'HTTP'), ('MQTT', 'MQTT'), ('OTHER', 'Other')], max_length=20, null=True)),
                ('active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('IDLE', 'Idle'), ('DOWN', 'Down'), ('ALARM', 'Alarm'), ('WARNING', 'Warning'), ('MAINTENANCE', 'Maintenance'), ('OFFLINE', 'Offline')], default='OFFLINE', max_length=20)),
                ('current_oee_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('current_availability_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('current_performance_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('current_quality_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('last_data_update', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional machine metadata')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cell', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='machines', to='oee_analytics.cell')),
            ],
            options={
                'db_table': 'asset_machine',
                'ordering': ['cell', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AssetTagMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_address', models.CharField(help_text='Source tag address (e.g., ns=2;i=1001)', max_length=500)),
                ('source_name', models.CharField(blank=True, help_text='Original tag name', max_length=200, null=True)),
                ('scale_factor', models.DecimalField(decimal_places=6, default=Decimal('1.0'), max_digits=10)),
                ('offset', models.DecimalField(decimal_places=4, default=Decimal('0.0'), max_digits=10)),
                ('sampling_interval_ms', models.IntegerField(default=1000, help_text='Sampling interval in milliseconds')),
                ('deadband_type', models.IntegerField(default=1, help_text='0=None, 1=Absolute, 2=Percent')),
                ('deadband_value', models.DecimalField(decimal_places=4, default=Decimal('0.0'), max_digits=10)),
                ('enabled', models.BooleanField(default=True)),
                ('last_value', models.TextField(blank=True, null=True)),
                ('last_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_quality', models.IntegerField(default=192)),
                ('metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('canonical_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.canonicaltag')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_mappings', to='oee_analytics.machine')),
            ],
            options={
                'db_table': 'asset_tag_mapping',
                'ordering': ['machine', 'canonical_tag'],
            },
        ),
        migrations.CreateModel(
            name='OEERollupDaily',
            fields=[
                ('rollup_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date_utc', models.DateField()),
                ('planned_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=10)),
                ('actual_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=10)),
                ('downtime_minutes', models.DecimalField(decimal_places=2, max_digits=10)),
                ('planned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unplanned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_cycles', models.IntegerField(default=0)),
                ('good_cycles', models.IntegerField(default=0)),
                ('scrap_cycles', models.IntegerField(default=0)),
                ('rework_cycles', models.IntegerField(default=0)),
                ('average_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('target_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('availability_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('performance_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('quality_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('oee_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('throughput_units_per_hour', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('machine', models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine')),
            ],
            options={
                'db_table': 'OEE_Rollup_Daily',
            },
        ),
        migrations.CreateModel(
            name='OEERollupHourly',
            fields=[
                ('rollup_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('bucket_start_utc', models.DateTimeField()),
                ('bucket_end_utc', models.DateTimeField()),
                ('shift_id', models.CharField(blank=True, max_length=20, null=True)),
                ('planned_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('actual_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('planned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('unplanned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_cycles', models.IntegerField(default=0)),
                ('good_cycles', models.IntegerField(default=0)),
                ('scrap_cycles', models.IntegerField(default=0)),
                ('rework_cycles', models.IntegerField(default=0)),
                ('average_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('target_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('availability_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('performance_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('quality_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('oee_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('throughput_units_per_hour', models.DecimalField(decimal_places=2, max_digits=10)),
                ('efficiency_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('utilization_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('top_downtime_reason', models.CharField(blank=True, max_length=20, null=True)),
                ('top_downtime_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('machine', models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine')),
            ],
            options={
                'db_table': 'OEE_Rollup_Hourly',
            },
        ),
        migrations.CreateModel(
            name='OEERollupShift',
            fields=[
                ('rollup_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('shift_date', models.DateField()),
                ('shift_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('shift_start_utc', models.DateTimeField()),
                ('shift_end_utc', models.DateTimeField()),
                ('planned_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('actual_production_time_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('planned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('unplanned_downtime_minutes', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_cycles', models.IntegerField(default=0)),
                ('good_cycles', models.IntegerField(default=0)),
                ('scrap_cycles', models.IntegerField(default=0)),
                ('rework_cycles', models.IntegerField(default=0)),
                ('average_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('target_cycle_time_seconds', models.DecimalField(decimal_places=3, max_digits=10)),
                ('availability_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('performance_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('quality_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('oee_percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('throughput_units_per_hour', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('machine', models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine')),
            ],
            options={
                'db_table': 'OEE_Rollup_Shift',
            },
        ),
        migrations.CreateModel(
            name='OPCUAServerConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_id', models.CharField(help_text='Unique server identifier', max_length=100, unique=True)),
                ('name', models.CharField(help_text='Display name', max_length=200)),
                ('endpoint_url', models.URLField(help_text='OPC-UA endpoint URL', max_length=500)),
                ('status', models.CharField(choices=[('DISCONNECTED', 'Disconnected'), ('CONNECTING', 'Connecting'), ('CONNECTED', 'Connected'), ('ERROR', 'Error'), ('DISABLED', 'Disabled')], default='DISCONNECTED', max_length=20)),
                ('enabled', models.BooleanField(default=True)),
                ('last_connection', models.DateTimeField(blank=True, null=True)),
                ('last_disconnection', models.DateTimeField(blank=True, null=True)),
                ('last_error', models.TextField(blank=True, null=True)),
                ('security_mode', models.CharField(choices=[('None', 'No Security'), ('Sign', 'Sign Only'), ('SignAndEncrypt', 'Sign and Encrypt')], default='SignAndEncrypt', max_length=20)),
                ('security_policy', models.CharField(default='Basic256Sha256', max_length=50)),
                ('auth_mode', models.CharField(choices=[('Anonymous', 'Anonymous'), ('UsernamePassword', 'Username/Password'), ('Certificate', 'Certificate')], default='Certificate', max_length=20)),
                ('username', models.CharField(blank=True, max_length=100, null=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('client_cert_path', models.CharField(blank=True, max_length=500, null=True)),
                ('client_key_path', models.CharField(blank=True, max_length=500, null=True)),
                ('server_cert_path', models.CharField(blank=True, max_length=500, null=True)),
                ('session_timeout_ms', models.IntegerField(default=30000)),
                ('keep_alive_interval_ms', models.IntegerField(default=10000)),
                ('reconnect_interval_s', models.IntegerField(default=5)),
                ('max_reconnect_attempts', models.IntegerField(default=-1, help_text='-1 for infinite')),
                ('publishing_interval_ms', models.IntegerField(default=250)),
                ('max_notifications_per_publish', models.IntegerField(default=1000)),
                ('max_concurrent_reads', models.IntegerField(default=100)),
                ('batch_read_size', models.IntegerField(default=50)),
                ('total_subscriptions', models.IntegerField(default=0)),
                ('total_monitored_items', models.IntegerField(default=0)),
                ('total_data_changes', models.BigIntegerField(default=0)),
                ('total_errors', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'opcua_server_connection',
                'indexes': [models.Index(fields=['server_id'], name='opcua_serve_server__d64aba_idx'), models.Index(fields=['status', 'enabled'], name='opcua_serve_status_d33f68_idx')],
            },
        ),
        migrations.CreateModel(
            name='OPCUASubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_id', models.IntegerField()),
                ('publishing_interval_ms', models.IntegerField(default=250)),
                ('keep_alive_count', models.IntegerField(default=10)),
                ('lifetime_count', models.IntegerField(default=3000)),
                ('max_notifications_per_publish', models.IntegerField(default=1000)),
                ('publishing_enabled', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0)),
                ('active', models.BooleanField(default=False)),
                ('monitored_items_count', models.IntegerField(default=0)),
                ('last_sequence_number', models.BigIntegerField(default=0)),
                ('total_data_changes', models.BigIntegerField(default=0)),
                ('total_events', models.BigIntegerField(default=0)),
                ('total_errors', models.BigIntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.opcuaserverconnection')),
            ],
            options={
                'db_table': 'opcua_subscription',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=200)),
                ('product_family', models.CharField(blank=True, max_length=100, null=True)),
                ('sku', models.CharField(blank=True, max_length=100, null=True)),
                ('standard_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('target_units_per_hour', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'Products',
                'indexes': [models.Index(fields=['product_family'], name='Products_product_12090b_idx'), models.Index(fields=['is_active'], name='Products_is_acti_7593f7_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProductionLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_id', models.CharField(help_text='Unique line identifier within area', max_length=50)),
                ('name', models.CharField(help_text='Line display name', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('design_capacity_per_hour', models.IntegerField(blank=True, help_text='Design capacity units/hour', null=True)),
                ('actual_capacity_per_hour', models.IntegerField(blank=True, help_text='Actual capacity units/hour', null=True)),
                ('primary_product', models.CharField(blank=True, max_length=100, null=True)),
                ('product_variants', models.JSONField(default=list, help_text='List of product variants')),
                ('standard_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('changeover_time_minutes', models.IntegerField(blank=True, null=True)),
                ('scheduled_uptime_hours_per_day', models.DecimalField(decimal_places=1, default=Decimal('24.0'), max_digits=4)),
                ('shifts_per_day', models.IntegerField(default=3)),
                ('active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('IDLE', 'Idle'), ('DOWN', 'Down'), ('MAINTENANCE', 'Maintenance'), ('CHANGEOVER', 'Changeover')], default='IDLE', max_length=20)),
                ('metadata', models.JSONField(default=dict, help_text='Additional line metadata')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='oee_analytics.area')),
            ],
            options={
                'db_table': 'asset_production_line',
                'ordering': ['area', 'name'],
            },
        ),
        migrations.AddField(
            model_name='cell',
            name='line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cells', to='oee_analytics.productionline'),
        ),
        migrations.CreateModel(
            name='QualityDefect',
            fields=[
                ('defect_code', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('defect_category', models.CharField(max_length=50)),
                ('defect_description', models.CharField(max_length=200)),
                ('severity_level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('rework_possible', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'QualityDefects',
                'indexes': [models.Index(fields=['defect_category'], name='QualityDefe_defect__4cb3c1_idx'), models.Index(fields=['severity_level'], name='QualityDefe_severit_c043c8_idx'), models.Index(fields=['is_active'], name='QualityDefe_is_acti_e3bc41_idx')],
            },
        ),
        migrations.CreateModel(
            name='QueryPerformanceLog',
            fields=[
                ('log_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('query_type', models.CharField(max_length=100)),
                ('execution_time_ms', models.IntegerField()),
                ('cpu_time_ms', models.IntegerField(blank=True, null=True)),
                ('logical_reads', models.BigIntegerField(blank=True, null=True)),
                ('physical_reads', models.BigIntegerField(blank=True, null=True)),
                ('row_count', models.BigIntegerField(blank=True, null=True)),
                ('query_hash', models.BinaryField(blank=True, max_length=8, null=True)),
                ('plan_hash', models.BinaryField(blank=True, max_length=8, null=True)),
                ('execution_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'QueryPerformanceLog',
                'indexes': [models.Index(fields=['query_type', 'execution_timestamp'], name='QueryPerfor_query_t_d15164_idx'), models.Index(fields=['execution_time_ms', 'execution_timestamp'], name='QueryPerfor_executi_bec41c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipe_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('recipe_name', models.CharField(max_length=200)),
                ('version', models.CharField(blank=True, max_length=20, null=True)),
                ('target_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('setup_time_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('teardown_time_minutes', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(db_column='product_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.product')),
            ],
            options={
                'db_table': 'Recipes',
            },
        ),
        migrations.CreateModel(
            name='ProductionSchedule',
            fields=[
                ('schedule_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('planned_start_utc', models.DateTimeField()),
                ('planned_end_utc', models.DateTimeField()),
                ('planned_quantity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('actual_start_utc', models.DateTimeField(blank=True, null=True)),
                ('actual_end_utc', models.DateTimeField(blank=True, null=True)),
                ('actual_quantity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('schedule_status', models.CharField(choices=[('PLANNED', 'Planned'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PLANNED', max_length=20)),
                ('priority_level', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('work_order_number', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('recipe', models.ForeignKey(db_column='recipe_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.recipe')),
            ],
            options={
                'db_table': 'ProductionSchedule',
            },
        ),
        migrations.CreateModel(
            name='ProductionCycle',
            fields=[
                ('cycle_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('start_timestamp_utc', models.DateTimeField()),
                ('end_timestamp_utc', models.DateTimeField(blank=True, null=True)),
                ('cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('target_cycle_time_seconds', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('good_parts_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('scrap_parts_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('rework_parts_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('cycle_status', models.CharField(choices=[('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('ABORTED', 'Aborted')], default='RUNNING', max_length=20)),
                ('operator_id', models.CharField(blank=True, max_length=50, null=True)),
                ('shift_id', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('machine', models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine')),
                ('recipe', models.ForeignKey(blank=True, db_column='recipe_id', null=True, on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.recipe')),
            ],
            options={
                'db_table': 'ProductionCycles',
            },
        ),
        migrations.CreateModel(
            name='ShiftPattern',
            fields=[
                ('shift_pattern_id', models.AutoField(primary_key=True, serialize=False)),
                ('pattern_name', models.CharField(max_length=100)),
                ('shift_1_start', models.TimeField()),
                ('shift_1_end', models.TimeField()),
                ('shift_2_start', models.TimeField(blank=True, null=True)),
                ('shift_2_end', models.TimeField(blank=True, null=True)),
                ('shift_3_start', models.TimeField(blank=True, null=True)),
                ('shift_3_end', models.TimeField(blank=True, null=True)),
                ('break_1_start', models.TimeField(blank=True, null=True)),
                ('break_1_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('break_2_start', models.TimeField(blank=True, null=True)),
                ('break_2_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('lunch_start', models.TimeField(blank=True, null=True)),
                ('lunch_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'ShiftPatterns',
                'indexes': [models.Index(fields=['is_active'], name='ShiftPatter_is_acti_dd2606_idx')],
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_id', models.CharField(help_text='Unique site identifier', max_length=50, unique=True)),
                ('name', models.CharField(help_text='Site display name', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('site_timezone', models.CharField(default='UTC', max_length=50)),
                ('site_manager', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('active', models.BooleanField(default=True)),
                ('commission_date', models.DateField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional site metadata')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'asset_site',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['site_id'], name='asset_site_site_id_7f398d_idx'), models.Index(fields=['active', 'name'], name='asset_site_active_331d72_idx')],
            },
        ),
        migrations.AddField(
            model_name='area',
            name='site',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='areas', to='oee_analytics.site'),
        ),
        migrations.CreateModel(
            name='SparkplugDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(help_text='Sparkplug Device ID', max_length=100)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('device_type', models.CharField(help_text='PLC, HMI, Sensor, etc.', max_length=50)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('OFFLINE', 'Offline'), ('ONLINE', 'Online'), ('BIRTH', 'Birth Received'), ('DEATH', 'Death Received'), ('COMMISSIONING', 'Commissioning'), ('MAINTENANCE', 'Maintenance')], default='OFFLINE', max_length=20)),
                ('last_birth_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_death_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_data_timestamp', models.DateTimeField(blank=True, null=True)),
                ('message_count', models.BigIntegerField(default=0)),
                ('error_count', models.BigIntegerField(default=0)),
                ('data_quality_score', models.DecimalField(decimal_places=2, default=Decimal('100.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('machine', models.ForeignKey(blank=True, help_text='Associated OEE machine', null=True, on_delete=django.db.models.deletion.SET_NULL, to='oee_analytics.machine')),
            ],
            options={
                'db_table': 'sp_devices',
            },
        ),
        migrations.CreateModel(
            name='SparkplugCommandAudit',
            fields=[
                ('command_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('metric_name', models.CharField(max_length=200)),
                ('command_value', models.TextField(help_text='Command value as JSON')),
                ('command_timestamp', models.DateTimeField()),
                ('sequence_number', models.BigIntegerField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('ACKNOWLEDGED', 'Acknowledged'), ('FAILED', 'Failed'), ('TIMEOUT', 'Timeout')], default='PENDING', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('response_value', models.TextField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('initiated_by', models.CharField(max_length=100)),
                ('client_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('reason', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.sparkplugdevice')),
            ],
            options={
                'db_table': 'sp_command_audit',
            },
        ),
        migrations.CreateModel(
            name='OPCUANodeMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opcua_node_id', models.CharField(help_text='OPC-UA Node ID (e.g., ns=2;i=1001)', max_length=500)),
                ('display_name', models.CharField(max_length=200)),
                ('browse_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('sparkplug_metric_name', models.CharField(max_length=200)),
                ('data_type', models.CharField(choices=[('BOOL', 'Boolean'), ('INT', 'Integer'), ('DINT', 'Double Integer'), ('REAL', 'Real/Float'), ('LREAL', 'Long Real/Double'), ('STRING', 'String'), ('DATETIME', 'DateTime')], default='REAL', max_length=20)),
                ('scale_factor', models.FloatField(default=1.0)),
                ('offset', models.FloatField(default=0.0)),
                ('unit', models.CharField(blank=True, max_length=50, null=True)),
                ('sampling_interval_ms', models.IntegerField(default=250)),
                ('deadband_type', models.IntegerField(default=1, help_text='0=None, 1=Absolute, 2=Percent')),
                ('deadband_value', models.FloatField(default=0.0)),
                ('queue_size', models.IntegerField(default=10)),
                ('discard_oldest', models.BooleanField(default=True)),
                ('oee_metric_type', models.CharField(blank=True, choices=[('CYCLE_START', 'Cycle Start'), ('CYCLE_END', 'Cycle End'), ('CYCLE_TIME', 'Cycle Time'), ('PART_COUNT_GOOD', 'Good Parts'), ('PART_COUNT_SCRAP', 'Scrap Parts'), ('PART_COUNT_REWORK', 'Rework Parts'), ('QUALITY_FLAG', 'Quality Flag'), ('DOWNTIME_START', 'Downtime Start'), ('DOWNTIME_END', 'Downtime End'), ('DOWNTIME_REASON', 'Downtime Reason'), ('MACHINE_STATUS', 'Machine Status'), ('PRODUCTION_RATE', 'Production Rate'), ('TEMPERATURE', 'Temperature'), ('PRESSURE', 'Pressure'), ('VIBRATION', 'Vibration'), ('SPEED', 'Speed'), ('ALARM_ACTIVE', 'Alarm Active')], max_length=30, null=True)),
                ('machine_id', models.CharField(blank=True, max_length=100, null=True)),
                ('line_id', models.CharField(blank=True, max_length=100, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('last_value', models.TextField(blank=True, null=True)),
                ('last_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_quality', models.IntegerField(default=100, help_text='0-100 quality score')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.opcuaserverconnection')),
                ('sparkplug_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='oee_analytics.sparkplugdevice')),
            ],
            options={
                'db_table': 'opcua_node_mapping',
            },
        ),
        migrations.CreateModel(
            name='SparkplugEventRaw',
            fields=[
                ('event_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('topic', models.CharField(help_text='Full MQTT topic', max_length=500)),
                ('message_type', models.CharField(choices=[('NBIRTH', 'Node Birth'), ('NDEATH', 'Node Death'), ('DBIRTH', 'Device Birth'), ('DDEATH', 'Device Death'), ('NDATA', 'Node Data'), ('DDATA', 'Device Data'), ('NCMD', 'Node Command'), ('DCMD', 'Device Command'), ('STATE', 'State Message')], max_length=10)),
                ('group_id', models.CharField(max_length=100)),
                ('node_id', models.CharField(blank=True, max_length=100, null=True)),
                ('device_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sequence_number', models.BigIntegerField(default=0)),
                ('timestamp_utc', models.DateTimeField()),
                ('payload_protobuf', models.BinaryField(help_text='Raw protobuf payload')),
                ('payload_json', models.TextField(help_text='Parsed payload as JSON')),
                ('processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('payload_size_bytes', models.IntegerField()),
                ('mqtt_qos', models.SmallIntegerField(default=1)),
                ('mqtt_retain', models.BooleanField(default=False)),
                ('received_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('broker_host', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'sp_event_raw',
                'indexes': [models.Index(fields=['group_id', 'node_id', 'timestamp_utc'], name='sp_event_ra_group_i_f1aacc_idx'), models.Index(fields=['message_type', 'timestamp_utc'], name='sp_event_ra_message_5515cf_idx'), models.Index(fields=['processed', 'received_at'], name='sp_event_ra_process_6253f7_idx'), models.Index(fields=['topic'], name='sp_event_ra_topic_14d1a0_idx'), models.Index(fields=['received_at'], name='sp_event_ra_receive_a52968_idx')],
            },
        ),
        migrations.CreateModel(
            name='SparkplugMetric',
            fields=[
                ('metric_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Metric name from Sparkplug payload', max_length=200)),
                ('alias', models.BigIntegerField(blank=True, help_text='Sparkplug metric alias', null=True)),
                ('data_type', models.CharField(choices=[('Int8', 'Int8'), ('Int16', 'Int16'), ('Int32', 'Int32'), ('Int64', 'Int64'), ('UInt8', 'UInt8'), ('UInt16', 'UInt16'), ('UInt32', 'UInt32'), ('UInt64', 'UInt64'), ('Float', 'Float'), ('Double', 'Double'), ('Boolean', 'Boolean'), ('String', 'String'), ('DateTime', 'DateTime'), ('Text', 'Text'), ('UUID', 'UUID'), ('DataSet', 'DataSet'), ('Bytes', 'Bytes'), ('File', 'File'), ('Template', 'Template')], max_length=20)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('units', models.CharField(blank=True, max_length=50, null=True)),
                ('min_value', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True)),
                ('max_value', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True)),
                ('oee_metric_type', models.CharField(blank=True, help_text='OEE metric type: CYCLE_TIME, PART_COUNT, QUALITY_FLAG, etc.', max_length=50, null=True)),
                ('last_value', models.TextField(blank=True, help_text='Last received value as JSON', null=True)),
                ('last_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_quality', models.IntegerField(default=192, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)])),
                ('message_count', models.BigIntegerField(default=0)),
                ('error_count', models.BigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.sparkplugdevice')),
            ],
            options={
                'db_table': 'sp_metrics',
            },
        ),
        migrations.CreateModel(
            name='SparkplugMetricHistory',
            fields=[
                ('history_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp_utc', models.DateTimeField(db_index=True)),
                ('value_json', models.TextField(help_text='Value stored as JSON for flexibility')),
                ('quality', models.IntegerField(default=192, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(255)])),
                ('sequence_number', models.BigIntegerField()),
                ('source_system', models.CharField(default='SPARKPLUG', max_length=50)),
                ('ingested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('event_raw', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='oee_analytics.sparkplugeventraw')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='oee_analytics.sparkplugmetric')),
            ],
            options={
                'db_table': 'sp_metric_history',
            },
        ),
        migrations.CreateModel(
            name='SparkplugNodeState',
            fields=[
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='oee_analytics.sparkplugnode')),
                ('session_number', models.BigIntegerField(default=0)),
                ('birth_timestamp', models.DateTimeField(blank=True, null=True)),
                ('last_will_timestamp', models.DateTimeField(blank=True, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('last_seen_timestamp', models.DateTimeField(blank=True, null=True)),
                ('consecutive_timeouts', models.IntegerField(default=0)),
                ('birth_certificate_valid', models.BooleanField(default=False)),
                ('required_metrics_count', models.IntegerField(default=0)),
                ('received_metrics_count', models.IntegerField(default=0)),
                ('messages_per_minute', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('average_latency_ms', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10)),
                ('packet_loss_percent', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=5)),
                ('health_score', models.DecimalField(decimal_places=2, default=Decimal('100.0'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'sp_node_state',
            },
        ),
        migrations.AddIndex(
            model_name='sparkplugnode',
            index=models.Index(fields=['group_id', 'status'], name='sp_nodes_group_i_c61603_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugnode',
            index=models.Index(fields=['status', 'last_data_timestamp'], name='sp_nodes_status_05b156_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugnode',
            index=models.Index(fields=['is_active'], name='sp_nodes_is_acti_22641e_idx'),
        ),
        migrations.AddConstraint(
            model_name='sparkplugnode',
            constraint=models.UniqueConstraint(fields=('group_id', 'node_id'), name='unique_group_node'),
        ),
        migrations.AddField(
            model_name='sparkplugmetric',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.sparkplugnode'),
        ),
        migrations.AddField(
            model_name='sparkplugdevice',
            name='node',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='oee_analytics.sparkplugnode'),
        ),
        migrations.AddField(
            model_name='sparkplugcommandaudit',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='oee_analytics.sparkplugnode'),
        ),
        migrations.AddField(
            model_name='opcuanodemapping',
            name='sparkplug_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='oee_analytics.sparkplugnode'),
        ),
        migrations.AddField(
            model_name='sqldowntimeevent',
            name='machine',
            field=models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine'),
        ),
        migrations.AddField(
            model_name='sqldowntimeevent',
            name='reason_code',
            field=models.ForeignKey(db_column='reason_code', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.downtimereason'),
        ),
        migrations.AddField(
            model_name='sqlmachineevent',
            name='machine',
            field=models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine'),
        ),
        migrations.AddField(
            model_name='sqlqualityevent',
            name='cycle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.productioncycle'),
        ),
        migrations.AddField(
            model_name='sqlqualityevent',
            name='defect_code',
            field=models.ForeignKey(blank=True, db_column='defect_code', null=True, on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.qualitydefect'),
        ),
        migrations.AddField(
            model_name='sqlqualityevent',
            name='machine',
            field=models.ForeignKey(db_column='machine_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlservermachine'),
        ),
        migrations.AddField(
            model_name='sqlserverproductionline',
            name='area',
            field=models.ForeignKey(db_column='area_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverarea'),
        ),
        migrations.AddField(
            model_name='sqlqualityevent',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='sqldowntimeevent',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='productionschedule',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='productioncycle',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='operatorshift',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='oeerollupshift',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='oeerolluphourly',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddField(
            model_name='oeerollupdaily',
            name='line',
            field=models.ForeignKey(db_column='line_id', on_delete=django.db.models.deletion.PROTECT, to='oee_analytics.sqlserverproductionline'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['cell', 'machine_id'], name='asset_machi_cell_id_35c31d_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['machine_type'], name='asset_machi_machine_5297ae_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['status'], name='asset_machi_status_ea6fca_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['active', 'status'], name='asset_machi_active_44c939_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['ip_address'], name='asset_machi_ip_addr_73c5cf_idx'),
        ),
        migrations.AddIndex(
            model_name='machine',
            index=models.Index(fields=['last_data_update'], name='asset_machi_last_da_6c3c23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='machine',
            unique_together={('cell', 'machine_id')},
        ),
        migrations.AddIndex(
            model_name='assettagmapping',
            index=models.Index(fields=['machine', 'enabled'], name='asset_tag_m_machine_88cfc4_idx'),
        ),
        migrations.AddIndex(
            model_name='assettagmapping',
            index=models.Index(fields=['canonical_tag'], name='asset_tag_m_canonic_f89d6d_idx'),
        ),
        migrations.AddIndex(
            model_name='assettagmapping',
            index=models.Index(fields=['last_timestamp'], name='asset_tag_m_last_ti_8c8f08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assettagmapping',
            unique_together={('machine', 'canonical_tag', 'source_address')},
        ),
        migrations.AlterUniqueTogether(
            name='opcuasubscription',
            unique_together={('server', 'subscription_id')},
        ),
        migrations.AddIndex(
            model_name='productionline',
            index=models.Index(fields=['area', 'line_id'], name='asset_produ_area_id_ade568_idx'),
        ),
        migrations.AddIndex(
            model_name='productionline',
            index=models.Index(fields=['area', 'active'], name='asset_produ_area_id_f35a9b_idx'),
        ),
        migrations.AddIndex(
            model_name='productionline',
            index=models.Index(fields=['status'], name='asset_produ_status_d350c0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productionline',
            unique_together={('area', 'line_id')},
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['line', 'cell_id'], name='asset_cell_line_id_5b9c6d_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['line', 'sequence_order'], name='asset_cell_line_id_ffa5c1_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['cell_type'], name='asset_cell_cell_ty_bb229f_idx'),
        ),
        migrations.AddIndex(
            model_name='cell',
            index=models.Index(fields=['status'], name='asset_cell_status_743c6e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='cell',
            unique_together={('line', 'cell_id')},
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['site', 'area_id'], name='asset_area_site_id_0e9824_idx'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['site', 'active'], name='asset_area_site_id_f34ba8_idx'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['area_type'], name='asset_area_area_ty_1dc0ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='area',
            unique_together={('site', 'area_id')},
        ),
        migrations.AddIndex(
            model_name='sparkplugmetrichistory',
            index=models.Index(fields=['metric', 'timestamp_utc'], name='sp_metric_h_metric__34f611_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetrichistory',
            index=models.Index(fields=['timestamp_utc'], name='sp_metric_h_timesta_39d1d6_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetrichistory',
            index=models.Index(fields=['quality'], name='sp_metric_h_quality_9091ba_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetrichistory',
            index=models.Index(fields=['sequence_number'], name='sp_metric_h_sequenc_529861_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetrichistory',
            index=models.Index(fields=['metric', 'timestamp_utc', 'quality'], name='sp_metric_h_metric__c39132_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['node', 'name'], name='sp_metrics_node_id_cd321b_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['device', 'name'], name='sp_metrics_device__830f31_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['alias'], name='sp_metrics_alias_016629_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['oee_metric_type'], name='sp_metrics_oee_met_c5f58b_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['last_timestamp'], name='sp_metrics_last_ti_76ec2b_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugmetric',
            index=models.Index(fields=['is_active'], name='sp_metrics_is_acti_0c3636_idx'),
        ),
        migrations.AddConstraint(
            model_name='sparkplugmetric',
            constraint=models.UniqueConstraint(condition=models.Q(('device__isnull', True)), fields=('node', 'name'), name='unique_node_metric'),
        ),
        migrations.AddConstraint(
            model_name='sparkplugmetric',
            constraint=models.UniqueConstraint(condition=models.Q(('device__isnull', False)), fields=('device', 'name'), name='unique_device_metric'),
        ),
        migrations.AddConstraint(
            model_name='sparkplugmetric',
            constraint=models.CheckConstraint(check=models.Q(('node__isnull', False), ('device__isnull', False), _connector='OR'), name='metric_has_parent'),
        ),
        migrations.AddIndex(
            model_name='sparkplugdevice',
            index=models.Index(fields=['node', 'status'], name='sp_devices_node_id_92af75_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugdevice',
            index=models.Index(fields=['device_type'], name='sp_devices_device__80b24d_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugdevice',
            index=models.Index(fields=['machine'], name='sp_devices_machine_2c1894_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugdevice',
            index=models.Index(fields=['is_active'], name='sp_devices_is_acti_c675db_idx'),
        ),
        migrations.AddConstraint(
            model_name='sparkplugdevice',
            constraint=models.UniqueConstraint(fields=('node', 'device_id'), name='unique_node_device'),
        ),
        migrations.AddIndex(
            model_name='sparkplugcommandaudit',
            index=models.Index(fields=['node', 'command_timestamp'], name='sp_command__node_id_440f9b_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugcommandaudit',
            index=models.Index(fields=['device', 'command_timestamp'], name='sp_command__device__1afb5b_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugcommandaudit',
            index=models.Index(fields=['status', 'created_at'], name='sp_command__status_ee48ac_idx'),
        ),
        migrations.AddIndex(
            model_name='sparkplugcommandaudit',
            index=models.Index(fields=['initiated_by', 'created_at'], name='sp_command__initiat_dd3ae5_idx'),
        ),
        migrations.AddIndex(
            model_name='opcuanodemapping',
            index=models.Index(fields=['server', 'enabled'], name='opcua_node__server__772ba1_idx'),
        ),
        migrations.AddIndex(
            model_name='opcuanodemapping',
            index=models.Index(fields=['sparkplug_metric_name'], name='opcua_node__sparkpl_6f6351_idx'),
        ),
        migrations.AddIndex(
            model_name='opcuanodemapping',
            index=models.Index(fields=['oee_metric_type', 'machine_id'], name='opcua_node__oee_met_a73e7b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='opcuanodemapping',
            unique_together={('server', 'opcua_node_id')},
        ),
        migrations.AddIndex(
            model_name='sqlmachineevent',
            index=models.Index(fields=['machine', 'timestamp_utc'], name='MachineEven_machine_1ff788_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlmachineevent',
            index=models.Index(fields=['timestamp_utc'], name='MachineEven_timesta_9e3f26_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlmachineevent',
            index=models.Index(fields=['event_type'], name='MachineEven_event_t_bf0022_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlmachineevent',
            index=models.Index(fields=['source_system'], name='MachineEven_source__84a0d2_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlmachineevent',
            index=models.Index(fields=['machine', 'timestamp_utc', 'event_type'], name='MachineEven_machine_eb5c4c_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlserverproductionline',
            index=models.Index(fields=['area'], name='ProductionL_area_id_bc3ddf_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlserverproductionline',
            index=models.Index(fields=['is_active'], name='ProductionL_is_acti_6cf3dd_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlqualityevent',
            index=models.Index(fields=['machine', 'timestamp_utc'], name='QualityEven_machine_ba580f_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlqualityevent',
            index=models.Index(fields=['line', 'timestamp_utc'], name='QualityEven_line_id_da3a67_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlqualityevent',
            index=models.Index(fields=['defect_code'], name='QualityEven_defect__b64e36_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlqualityevent',
            index=models.Index(fields=['cycle'], name='QualityEven_cycle_i_447709_idx'),
        ),
        migrations.AddIndex(
            model_name='sqlqualityevent',
            index=models.Index(fields=['shift_id'], name='QualityEven_shift_i_c763f2_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['machine', 'start_timestamp_utc'], name='DowntimeEve_machine_03ef91_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['line', 'start_timestamp_utc'], name='DowntimeEve_line_id_85d7e4_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['reason_code'], name='DowntimeEve_reason__810417_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['is_planned'], name='DowntimeEve_is_plan_410195_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['shift_id'], name='DowntimeEve_shift_i_8f25d7_idx'),
        ),
        migrations.AddIndex(
            model_name='sqldowntimeevent',
            index=models.Index(fields=['reason_code', 'start_timestamp_utc'], include=('duration_minutes', 'machine', 'line'), name='idx_downtime_pareto_covering'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['product'], name='Recipes_product_2da1ca_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['line'], name='Recipes_line_id_24ca3f_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['is_active'], name='Recipes_is_acti_766b1d_idx'),
        ),
        migrations.AddIndex(
            model_name='productionschedule',
            index=models.Index(fields=['line', 'planned_start_utc'], name='ProductionS_line_id_292e91_idx'),
        ),
        migrations.AddIndex(
            model_name='productionschedule',
            index=models.Index(fields=['schedule_status'], name='ProductionS_schedul_3f40aa_idx'),
        ),
        migrations.AddIndex(
            model_name='productionschedule',
            index=models.Index(fields=['work_order_number'], name='ProductionS_work_or_ffa89d_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['machine', 'start_timestamp_utc'], name='ProductionC_machine_0c6799_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['line', 'start_timestamp_utc'], name='ProductionC_line_id_326252_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['recipe'], name='ProductionC_recipe__5498ef_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['cycle_status'], name='ProductionC_cycle_s_5e02bb_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['shift_id'], name='ProductionC_shift_i_0939f9_idx'),
        ),
        migrations.AddIndex(
            model_name='productioncycle',
            index=models.Index(fields=['machine', 'start_timestamp_utc'], include=('cycle_time_seconds', 'good_parts_count', 'scrap_parts_count', 'target_cycle_time_seconds'), name='idx_cycle_oee_covering'),
        ),
        migrations.AddIndex(
            model_name='operatorshift',
            index=models.Index(fields=['operator_id', 'shift_date'], name='OperatorShi_operato_3ae577_idx'),
        ),
        migrations.AddIndex(
            model_name='operatorshift',
            index=models.Index(fields=['line', 'shift_date'], name='OperatorShi_line_id_f57530_idx'),
        ),
        migrations.AddIndex(
            model_name='oeerollupshift',
            index=models.Index(fields=['machine', 'shift_date'], name='OEE_Rollup__machine_158f02_idx'),
        ),
        migrations.AddIndex(
            model_name='oeerollupshift',
            index=models.Index(fields=['line', 'shift_date'], name='OEE_Rollup__line_id_917cb1_idx'),
        ),
        migrations.AddConstraint(
            model_name='oeerollupshift',
            constraint=models.UniqueConstraint(fields=('machine', 'shift_date', 'shift_number'), name='unique_machine_shift'),
        ),
        migrations.AddIndex(
            model_name='oeerolluphourly',
            index=models.Index(fields=['machine', 'bucket_start_utc'], name='OEE_Rollup__machine_bd1c6c_idx'),
        ),
        migrations.AddIndex(
            model_name='oeerolluphourly',
            index=models.Index(fields=['line', 'bucket_start_utc'], name='OEE_Rollup__line_id_95a077_idx'),
        ),
        migrations.AddIndex(
            model_name='oeerolluphourly',
            index=models.Index(fields=['shift_id'], name='OEE_Rollup__shift_i_a62db5_idx'),
        ),
        migrations.AddConstraint(
            model_name='oeerolluphourly',
            constraint=models.UniqueConstraint(fields=('machine', 'bucket_start_utc'), name='unique_machine_bucket'),
        ),
        migrations.AddIndex(
            model_name='oeerollupdaily',
            index=models.Index(fields=['machine', 'date_utc'], name='OEE_Rollup__machine_240aa7_idx'),
        ),
        migrations.AddIndex(
            model_name='oeerollupdaily',
            index=models.Index(fields=['line', 'date_utc'], name='OEE_Rollup__line_id_6f5479_idx'),
        ),
        migrations.AddConstraint(
            model_name='oeerollupdaily',
            constraint=models.UniqueConstraint(fields=('machine', 'date_utc'), name='unique_machine_date'),
        ),
    ]
