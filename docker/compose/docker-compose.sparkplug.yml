# Docker Compose for Sparkplug B OEE System
# Complete production-ready deployment with all dependencies

version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SQL_SA_PASSWORD:-ComplexPassword123!}
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - oee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SQL_SA_PASSWORD:-ComplexPassword123!} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Eclipse Mosquitto MQTT Broker
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - ./certs:/mosquitto/certs
    networks:
      - oee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t '$$SYS/broker/ping' -m 'ping' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oee_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django OEE Dashboard Application
  oee-dashboard:
    build:
      context: ../..
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=oee_dashboard.settings
      - DATABASE_HOST=sqlserver
      - DATABASE_PORT=1433
      - DATABASE_NAME=OEE_Dashboard
      - DATABASE_USER=sa
      - DATABASE_PASSWORD=${SQL_SA_PASSWORD:-ComplexPassword123!}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./static:/app/static
      - ./logs:/app/logs
    networks:
      - oee_network
    depends_on:
      - sqlserver
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sparkplug B Agent
  sparkplug-agent:
    build:
      context: ../..
      dockerfile: Dockerfile.sparkplug
      target: production
    environment:
      - DJANGO_SETTINGS_MODULE=oee_dashboard.settings
      - DATABASE_HOST=sqlserver
      - DATABASE_PORT=1433
      - DATABASE_NAME=OEE_Dashboard
      - DATABASE_USER=sa
      - DATABASE_PASSWORD=${SQL_SA_PASSWORD:-ComplexPassword123!}
      - MQTT_BROKER_HOST=mqtt-broker
      - MQTT_BROKER_PORT=1883
      - MQTT_USERNAME=${MQTT_USERNAME:-}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-}
      - MQTT_USE_TLS=false
      - SPARKPLUG_GROUP_ID=${SPARKPLUG_GROUP_ID:-OEE_Production}
      - SPARKPLUG_NODE_ID=${SPARKPLUG_NODE_ID:-OEE_Node_01}
      - PLC1_HOST=${PLC1_HOST:-plc-simulator-s7}
      - PLC2_HOST=${PLC2_HOST:-plc-simulator-ab}
      - SPARKPLUG_LOG_LEVEL=INFO
    ports:
      - "8001:8001"  # Prometheus metrics
      - "8002:8002"  # Health checks
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./certs:/app/certs
    networks:
      - oee_network
    depends_on:
      - sqlserver
      - mqtt-broker
      - oee-dashboard
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PLC Simulator - Siemens S7
  plc-simulator-s7:
    build:
      context: ../..
      dockerfile: Dockerfile.plc-simulator
    environment:
      - PLC_TYPE=SIEMENS_S7
      - PLC_HOST=0.0.0.0
      - PLC_PORT=102
      - SCENARIO=production_line_1
    ports:
      - "10102:102"
    networks:
      - oee_network
    restart: unless-stopped

  # PLC Simulator - Allen-Bradley
  plc-simulator-ab:
    build:
      context: ../..
      dockerfile: Dockerfile.plc-simulator
    environment:
      - PLC_TYPE=ALLEN_BRADLEY
      - PLC_HOST=0.0.0.0
      - PLC_PORT=44818
      - SCENARIO=production_line_2
    ports:
      - "10818:44818"
    networks:
      - oee_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ../..
      dockerfile: Dockerfile
    command: celery -A oee_dashboard worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=oee_dashboard.settings
      - DATABASE_HOST=sqlserver
      - DATABASE_PORT=1433
      - DATABASE_NAME=OEE_Dashboard
      - DATABASE_USER=sa
      - DATABASE_PASSWORD=${SQL_SA_PASSWORD:-ComplexPassword123!}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    networks:
      - oee_network
    depends_on:
      - sqlserver
      - redis
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ../..
      dockerfile: Dockerfile
    command: celery -A oee_dashboard beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DJANGO_SETTINGS_MODULE=oee_dashboard.settings
      - DATABASE_HOST=sqlserver
      - DATABASE_PORT=1433
      - DATABASE_NAME=OEE_Dashboard
      - DATABASE_USER=sa
      - DATABASE_PASSWORD=${SQL_SA_PASSWORD:-ComplexPassword123!}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    networks:
      - oee_network
    depends_on:
      - sqlserver
      - redis
    restart: unless-stopped

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - oee_network
    restart: unless-stopped

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - oee_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
      - ./static:/var/www/static
    networks:
      - oee_network
    depends_on:
      - oee-dashboard
      - grafana
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  oee_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16